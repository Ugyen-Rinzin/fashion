* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
.main {
  max-width: 1100px;
  padding-left: 30px;
  padding-right: 30px;

  margin-top: 20px;
  margin-bottom: 100px;

  /* margin-left: auto;
     margin-right auto;
     Is a trick for centering an element horizontally
     without needing a container. */
  margin-left: auto;
  margin-right: auto;
}

.page-title {
  font-weight: 700;
  font-size: 22px;
  margin-bottom: 18px;
}

.checkout-grid {
  display: grid;
  /* Here, 1fr means the first column will take
     up the remaining space in the grid. */
  grid-template-columns: 1fr 350px;
  column-gap: 12px;

  /* Use align-items: start; to prevent the elements
     in the grid from stretching vertically. */
  align-items: start;
}

@media (max-width: 1000px) {
  .main {
    max-width: 500px;
  }

  .checkout-grid {
    grid-template-columns: 1fr;
  }
}

.cart-item-container,
.payment-summary {
  border: 1px solid rgb(222, 222, 222);
  border-radius: 4px;
  padding: 18px;
}

.cart-item-container {
  margin-bottom: 12px;
}

.payment-summary {
  padding-bottom: 5px;
}

@media (max-width: 1000px) {
  .payment-summary {
    /* grid-row: 1 means this element will be placed into row
      1 in the grid. (Normally, the row that an element is
      placed in is determined by the order of the elements in
      the HTML. grid-row overrides this default ordering). */
    grid-row: 1;
    margin-bottom: 12px;
  }
}

.delivery-date {
  color: rgb(0, 118, 0);
  font-weight: 700;
  font-size: 19px;
  margin-top: 5px;
  margin-bottom: 22px;
}

.cart-item-details-grid {
  display: grid;
  /* 100px 1fr 1fr; means the 2nd and 3rd column will
     take up half the remaining space in the grid
     (they will divide up the remaining space evenly). */
  grid-template-columns: 100px 1fr 1fr;
  column-gap: 25px;
}

@media (max-width: 1000px) {
  .cart-item-details-grid {
    grid-template-columns: 100px 1fr;
    row-gap: 30px;
  }
}

.product-image {
  max-width: 100%;
  max-height: 120px;

  /* margin-left: auto;
     margin-right auto;
     Is a trick for centering an element horizontally
     without needing a container. */
  margin-left: auto;
  margin-right: auto;
}

.product-name {
  font-weight: 700;
  margin-bottom: 8px;
}

.product-price {
  color: rgb(177, 39, 4);
  font-weight: 700;
  margin-bottom: 5px;
}

.product-quantity .link-primary {
  margin-left: 3px;
}

@media (max-width: 1000px) {
  .delivery-options {
    /* grid-column: 1 means this element will be placed
       in column 1 in the grid. (Normally, the column that
       an element is placed in is determined by the order
       of the elements in the HTML. grid-column overrides
       this default ordering).
       
       / span 2 means this element will take up 2 columns
       in the grid (Normally, each element takes up 1
       column in the grid). */
    grid-column: 1 / span 2;
  }
}

.delivery-options-title {
  font-weight: 700;
  margin-bottom: 10px;
}

.delivery-option {
  display: grid;
  grid-template-columns: 24px 1fr;
  margin-bottom: 12px;
  cursor: pointer;
}

.delivery-option-input {
  margin-left: 0px;
  cursor: pointer;
}

.delivery-option-date {
  color: rgb(0, 118, 0);
  font-weight: 500;
  margin-bottom: 3px;
}

.delivery-option-price {
  color: rgb(120, 120, 120);
  font-size: 15px;
}

.payment-summary-title {
  font-weight: 700;
  font-size: 18px;
  margin-bottom: 12px;
}

.payment-summary-row {
  display: grid;
  /* 1fr auto; means the width of the 2nd column will be
     determined by the elements inside the column (auto).
     The 1st column will take up the remaining space. */
  grid-template-columns: 1fr auto;

  font-size: 15px;
  margin-bottom: 9px;
}

.payment-summary-money {
  text-align: right;
}

.subtotal-row .payment-summary-money {
  border-top: 1px solid rgb(222, 222, 222);
}

.subtotal-row div {
  padding-top: 9px;
}

.total-row {
  color: rgb(177, 39, 4);
  font-weight: 700;
  font-size: 18px;
  border-top: 1px solid rgb(222, 222, 222);
  padding-top: 18px;
}

.place-order-button {
  width: 100%;
  padding-top: 12px;
  padding-bottom: 12px;
  border-radius: 8px;

  margin-top: 11px;
  margin-bottom: 15px;
}

/* paymentPrompts */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  outline: none;
  border: none;
  text-transform: capitalize;
  transition: all 0.2s lenear;
}
.paymentForm {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 25px;
  min-height: 100vh;
  padding-bottom: 70px;
}
.paymentForm form {
  padding: 20px;
  width: 700px;
  background-color: #fff;
  box-shadow: 0 5px 10px rgba(0, 0, 0.1);
}
.paymentForm form .row {
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
}
.paymentForm form .row .col {
  flex: 1 1 250px;
}
.paymentForm form .row .col .title {
  font-size: 20px;
  color: #333;
  padding-bottom: 5px;
  text-transform: uppercase;
}
.paymentForm form .row .col .inputBox {
  margin: 15px 0;
}
.paymentForm form .row .col .inputBox span {
  margin-bottom: 10px;
  display: block;
}
.paymentForm form .row .col .inputBox input {
  width: 100%;
  border: 1px solid #ccc;
  padding: 10px 15px;
  font-size: 15px;
  text-transform: none;
}
.paymentForm form .row .col .inputBox input:focus {
  border: 1px solid #000;
}
.paymentForm form .row .col .flex {
  display: flex;
  gap: 15px;
}
.paymentForm form .row .col .flex .inputBox {
  margin-top: 5px;
}
.paymentForm form .row .col .flex .inputBox img {
  /* height: 3px; */
  margin-top: 5px;
  filter: drop-shadow(0 0 1px #000);
}
.paymentForm form .submit-btn {
  width: 100%;
  padding: 12px;
  font-size: 17px;
  background: #27ae60;
  color: #fff;
  margin-top: 5px;
  cursor: pointer;
}
.paymentForm form .submit-btn:hover {
  background: #2ecc71;
}

.hidden {
  display: none;
}
.paybtn {
  width: 100%;
  padding: 12px;
  font-size: 17px;
  background: #27ae60;
  color: #fff;
  margin-top: 5px;
  cursor: pointer;
}
.paybtn:hover {
  background: #2ecc71;
}

@media screen and(max-width: 480px) {
  .checkout-grid {
    display: grid;
    /* Here, 1fr means the first column will take
       up the remaining space in the grid. */
    grid-template-columns: 1fr 350px;
    column-gap: 12px;

    /* Use align-items: start; to prevent the elements
       in the grid from stretching vertically. */
    align-items: start;
  }
  .paymentForm {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    width: 300px;
  }
  #form1 {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
  }

  #form1 .row {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    flex-wrap: wrap;
  }
  .col {
    display: flex;
    flex-direction: column;
  }
  .inputBox {
    display: flex;
    flex-direction: column;
  }
}
@media screen and(max-width:768px) {
  .checkout-grid {
    display: grid;
    /* Here, 1fr means the first column will take
       up the remaining space in the grid. */
    grid-template-columns: 1fr 350px;
    column-gap: 12px;

    /* Use align-items: start; to prevent the elements
       in the grid from stretching vertically. */
    align-items: start;
  }
}
/* .paymentForm {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 25px;
  min-height: 50vh;
  width: 50px;
  padding-bottom: 70px;
}
.paymentForm form {
  width: 300px;
} */

@media (max-width: 2000px) {
  .products-grid {
    grid-template-columns: repeat(7, 1fr);
  }
}

/* This @media means when the screen width is 1600px or
     less, we will divide the grid into 6 columns. */
@media (max-width: 1600px) {
  .products-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media (max-width: 1000px) {
  .products-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media (max-width: 800px) {
  .products-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media (max-width: 575px) {
  .products-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 450px) {
  .products-grid {
    grid-template-columns: 1fr;
  }
}
